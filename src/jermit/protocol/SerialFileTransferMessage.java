/*
 * Jermit
 *
 * The MIT License (MIT)
 *
 * Copyright (C) 2018 Kevin Lamonte
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * @author Kevin Lamonte [kevin.lamonte@gmail.com]
 * @version 1
 */
package jermit.protocol;

/**
 * SerialFileTransferMessage stores a single message generated by a file
 * transfer session.
 */
public class SerialFileTransferMessage {

    // ------------------------------------------------------------------------
    // Variables --------------------------------------------------------------
    // ------------------------------------------------------------------------

    /**
     * Type value for an informational message.
     */
    public static final int INFO = 1;

    /**
     * Type value for an error message.
     */
    public static final int ERROR = 2;

    /**
     * The message type: INFO or ERROR.
     */
    private int type;

    /**
     * The time this message was generated.
     */
    private long time;

    /**
     * The message text.
     */
    private String message;

    // ------------------------------------------------------------------------
    // Constructors -----------------------------------------------------------
    // ------------------------------------------------------------------------

    /**
     * Construct an INFO message.
     *
     * @param message the message text
     */
    public SerialFileTransferMessage(String message) {
        time = System.currentTimeMillis();
        type = INFO;
        this.message = message;
    }

    /**
     * Construct a message.
     *
     * @param type INFO or ERROR
     * @param message the message text
     * @throws IllegalArgumentException if type is not INFO or ERROR
     */
    public SerialFileTransferMessage(int type, String message) {
        if ((type != INFO) && (type != ERROR)) {
            throw new IllegalArgumentException("Invalid message type: " + type);
        }
        time = System.currentTimeMillis();
        this.type = type;
        this.message = message;
    }

    // ------------------------------------------------------------------------
    // SerialFileTransferMessage ----------------------------------------------
    // ------------------------------------------------------------------------

    /**
     * Get the message time.
     *
     * @return the difference, measured in milliseconds, between the message
     * creation time and midnight, January 1, 1970 UTC.
     */
    public long getTime() {
        return time;
    }

    /**
     * Get the message text.
     *
     * @return the message
     */
    public String getMessage() {
        return message;
    }

    /**
     * Returns true if this is an informational message.
     *
     * @return true if this is an informational message
     */
    public boolean isInfo() {
        if (type == INFO) {
            return true;
        }
        return false;
    }

    /**
     * Returns true if this is an error message.
     *
     * @return true if this is an error message
     */
    public boolean isError() {
        if (type == ERROR) {
            return true;
        }
        return false;
    }

    /**
     * Get the message type.
     *
     * @return INFO or ERROR
     */
    public int getType() {
        return type;
    }

}
